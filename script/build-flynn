#!/bin/bash

set -e

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"

usage() {
  cat <<USAGE >&2
usage: $0 [options]

Build Flynn using the builder image.

OPTIONS:
  -h, --help              Show this message
  -v, --verbose           Be verbose
  -x, --version=VERSION   Explicit version to use [default: dev]
  -t, --tuf-keys=KEYS     TUF root keys
  --git-version           Generate the version using git status
USAGE
}

main() {
  local version="dev"
  local verbose=false
  local tuf_keys=""

  while true; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --verbose)
        verbose=true
        shift
        ;;
      -x | --version)
        if [[ -z "$2" ]]; then
          fail "--version flag requires an argument"
        fi
        version="$2"
        shift 2
        ;;
      -t | --tuf-keys)
        if [[ -z "$2" ]]; then
          fail "--tuf-keys flag requires an argument"
        fi
        tuf_keys="$2"
        shift 2
        ;;
      --git-version)
        version="$(git_version)"
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    usage
    exit 1
  fi

  # TODO: remove
  rm -f "${ROOT}/cli/tuf.go"

  local flynn_host="${ROOT}/build/bin/flynn-host"

  # if building from clean, download binaries + images
  if ! [[ -e "${flynn_host}" ]]; then
    local sha="132903ae94d7c1b174261e738424b94022233d938ef091659727a30bddeb7a61d114b762f0fc2ffeecb967aef87d92bc71a79b9c3df31220c24ee9d8d83fa932"
    local url="https://s3.amazonaws.com/flynn-temp/tuf/targets/${sha}.flynn-host.gz"

    info "downloading flynn-host from ${url}"
    mkdir -p "${ROOT}/build/bin"
    curl -fsSLo "${flynn_host}.gz" "${url}"
    echo "${sha}  ${flynn_host}.gz" | shasum -a "512" -c -
    gunzip "${flynn_host}.gz"
    chmod +x "${flynn_host}"

    info "downloading binaries + images"
    local version="dev"
    mkdir -p "${ROOT}/build/manifests"
    sudo FLYNN_VERSION="${version}" "${flynn_host}" download \
      --repository "https://s3.amazonaws.com/flynn-temp/tuf" \
      --tuf-db     "${ROOT}/build/tuf.db" \
      --bin-dir    "${ROOT}/build/bin" \
      --config-dir "${ROOT}/build/manifests" \
      --volpath    "/var/lib/flynn/volumes-0"

    mkdir -p "${ROOT}/build/image"
    jq '.builder' "${ROOT}/build/manifests/images.${version}.json" > "${ROOT}/build/image/builder.json"
  fi

  # bootstrap the cluster if not running
  if ! curl -fsSLo /dev/null "http://1.localflynn.com:1111/.well-known/status"; then
    info "Flynn cluster not running, bootstrapping"
    "${ROOT}/script/bootstrap-flynn"
  fi

  local args=("--version" "${version}")
  if $verbose; then
    args+=("--verbose")
  fi
  if [[ -n "${tuf_keys}" ]]; then
    args+=("--tuf-keys" "${tuf_keys}")
  fi

  sudo mkdir -p "/var/lib/flynn/layer-cache"
  export DISCOVERD="http://1.localflynn.com:1111"
  "${flynn_host}" run \
    --bind    "${ROOT}:${ROOT},/var/lib/flynn/layer-cache:/var/lib/flynn/layer-cache" \
    --limits  "temp_disk=1G" \
    --workdir "${ROOT}" \
    "${ROOT}/build/image/builder.json" \
    /usr/bin/env \
    GOPATH="${GOPATH}" \
    /bin/flynn-builder build ${args[@]}

  local dir="${ROOT}/build"

  # mount and symlink some images and binaries
  mount "go"
  link "go" "/usr/local/go"        "${ROOT}/build/go"
  link "go" "/usr/local/go/bin/go" "${ROOT}/build/bin/go"

  mount "host"
  link "host" "/usr/local/bin/flynn-host" "${dir}/bin/flynn-host"
  link "host" "/usr/local/bin/flynn-init" "${dir}/bin/flynn-init"

  for platform in {linux-amd64,linux-386,darwin-amd64,freebsd-amd64,windows-amd64,windows-386}; do
    mount "cli-${platform}"
    link "cli-${platform}" "/bin/flynn-${platform}" "${dir}/bin/flynn-${platform}"
  done
  link "cli-linux-amd64" "/bin/flynn-linux-amd64" "${dir}/bin/flynn"

  mount "release"
  link "release" "/bin/flynn-release" "${dir}/bin/flynn-release"

  mount "builder"
  link "builder" "/bin/flynn-builder" "${dir}/bin/flynn-builder"

  mount "discoverd"
  link "discoverd" "/bin/discoverd" "${dir}/bin/discoverd"

  mount "test"
  link "test" "/bin/flynn-test-file-server" "${dir}/bin/flynn-test-file-server"

  # TODO: remove
  cp "${ROOT}/build/bin/flynn-host" "${ROOT}/host/bin/flynn-host"
  cp "${ROOT}/build/bin/flynn-init" "${ROOT}/host/bin/flynn-init"
  cp "${ROOT}/build/manifests/bootstrap-manifest.json" "${ROOT}/bootstrap/bin/manifest.json"
}

git_version() {
  # if there are tags like 'vYYYYMMDD.N' pointing at HEAD, use the most recent one
  local tag="$(git tag --list "v*" --sort "v:refname" --points-at HEAD 2>/dev/null | tail -n 1)"
  if [[ -n "${tag}" ]]; then
    echo "${tag}"
    return
  fi

  # use the branch and commit, appending a '+' if the index is dirty
  local branch="$(git rev-parse --abbrev-ref HEAD)"
  local commit="$(git rev-parse --short HEAD)"
  local version="${branch}-${commit}"
  if [[ -n "$(git status --porcelain)" ]]; then
    version="${version}+"
  fi
  echo "${version}"
}

mount() {
  local image=$1

  local id="$(jq --raw-output ".[\"${image}\"].manifest.rootfs[0].layers[].id" "${ROOT}/build/images.json" | tail -1)"
  if [[ -z "${id}" ]]; then
    fail "unable to determine ${image} layer ID"
  fi

  local mnt="/var/lib/flynn/layer-cache/${id}"
  if grep -q "${mnt}" /proc/mounts; then
    mkdir -p "${ROOT}/build/mnt"
    ln -nfs "${mnt}" "${ROOT}/build/mnt/${image}"
    return
  fi

  local layer="/var/lib/flynn/layer-cache/${id}.squashfs"
  if ! [[ -e "${layer}" ]]; then
    fail "${image} layer not found: ${layer}"
  fi

  # loop mount the layer manually in case there are no free loop devices
  local loop="$(sudo losetup --associated "${layer}" | grep -m1 -oP "/dev/loop\d+")"
  if [[ -z "${loop}" ]]; then
    loop="$(sudo losetup --find "${layer}" 2>/dev/null || true)"
  fi
  if [[ -z "${loop}" ]]; then
    local num="$(find /dev | grep -oP "/dev/loop\d+" | wc -l)"
    loop="/dev/loop${num}"
    sudo mknod -m 0660 "${loop}" b 7 "${num}"
    sudo losetup "${loop}" "${layer}"
  fi
  if [[ -z "${loop}" ]]; then
    fail "error creating loop device"
  fi

  sudo mkdir -p "${mnt}"
  sudo mount -t "squashfs" -o "ro" "${loop}" "${mnt}"

  mkdir -p "${ROOT}/build/mnt"
  ln -nfs "${mnt}" "${ROOT}/build/mnt/${image}"
}

link() {
  local image=$1
  local src=$2
  local dst=$3

  ln -nfs "${ROOT}/build/mnt/${image}${src}" "${dst}"
}

main $@
